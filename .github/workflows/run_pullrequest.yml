name: Pull Request CI/CD

on:
  pull_request:
    branches:
      - main

permissions:
  contents: read
  pull-requests: write

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker
        uses: docker/setup-buildx-action@v3

      - name: Comment PR - CI/CD Starting
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'CI/CD en acción. Ejecutando tareas …'
            })

      - name: Build Docker image
        run: |
          docker build -f Dockerfile.backend -t backend-image .

      - name: Run Docker container
        run: |
          docker run -d -p 5000:5000 --name backend-container backend-image

      - name: Wait for backend service to be healthy
        run: |
          echo "Waiting for backend service to be available..."
          for i in {1..30}; do
            if docker exec backend-container curl -s http://localhost:5000/health >/dev/null; then
              echo "Backend service is up!"
              exit 0
            fi
            echo "Waiting... ($i/30)"
            sleep 2
          done
          echo "Backend service failed to start within 60 seconds."
          docker logs backend-container
          exit 1

      - name: Debug container network
        run: |
          docker inspect backend-container | grep -i ipaddress
          docker ps -a
          docker logs backend-container

      - name: Run unit tests
        run: |
          docker exec backend-container python /app/prediction/test.py

      - name: Stop and remove container
        if: always()
        run: |
          docker stop backend-container || true
          docker rm backend-container || true

      - name: Comment PR - CI/CD Success
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'CI/CD terminado con éxito.'
            })