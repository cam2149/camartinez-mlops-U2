name: Pull Request CI/CD

on:
  pull_request:
    branches:
      - main

permissions:
  contents: read
  pull-requests: write

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Comment PR - CI/CD Starting
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'CI/CD en acción. Ejecutando tareas …'
            })

      - name: Build and start services with Docker Compose
        run: |
          docker-compose -f docker-compose.yml up --build -d

      - name: Extract container IP address
        id: get-ip
        run: |
          CONTAINER_IP=$(docker inspect backend-container | grep -oP '"IPAddress": "\K[0-9.]+(?=")')
          if [ -z "$CONTAINER_IP" ]; then
            echo "Failed to extract container IP address"
            docker logs backend-container
            exit 1
          fi
          echo "Container IP: $CONTAINER_IP"
          echo "container_ip=$CONTAINER_IP" >> $GITHUB_OUTPUT

      - name: Wait for backend service to be healthy
        run: |
          check_backend_health() {
            local ip="$CONTAINER_IP"
            local max_attempts=30
            local attempt=1
            local base_delay=2
            echo "Checking backend service health at http://$ip:5000/health..."
            while [ $attempt -le $max_attempts ]; do
              # Run curl inside the container, but use the container's IP
              if docker exec backend-container curl -s -f "http://$ip:5000/health" | grep -q '"status":"ok"'; then
                echo "Backend service is up!"
                return 0
              fi
              echo "Waiting... ($attempt/$max_attempts)"
              sleep $((base_delay * attempt / 10 + 1))
              attempt=$((attempt + 1))
            done
            echo "Backend service failed to start within $((max_attempts * 3)) seconds."
            docker logs backend-container > backend-container.log
            return 1
          }
          check_backend_health "${{ steps.get-ip.outputs.container_ip }}" || { echo "Health check failed"; exit 1; }

      # Alternative: Health check from host (uncomment to use)
      # - name: Wait for backend service to be healthy (host)
      #   run: |
      #     check_backend_health_host() {
      #       local ip="$1"
      #       local max_attempts=30
      #       local attempt=1
      #       local base_delay=2
      #       echo "Checking backend service health at http://$ip:5000/health from host..."
      #       while [ $attempt -le $max_attempts ]; do
      #         if curl -s -f "http://$ip:5000/health" | grep -q '"status":"ok"'; then
      #           echo "Backend service is up!"
      #           return 0
      #         fi
      #         echo "Waiting... ($attempt/$max_attempts)"
      #         sleep $((base_delay * attempt / 10 + 1))
      #         attempt=$((attempt + 1))
      #       done
      #       echo "Backend service failed to start within $((max_attempts * 3)) seconds."
      #       docker logs backend-container > backend-container.log
      #       return 1
      #     }
      #     check_backend_health_host "${{ steps.get-ip.outputs.container_ip }}" || { echo "Health check failed"; exit 1; }

      - name: Debug container network
        if: failure()
        run: |
          docker inspect backend-container | grep -i ipaddress
          docker ps -a
          docker logs backend-container

      - name: Upload container logs on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: backend-container-logs
          path: backend-container.log
          retention-days: 7

      - name: Run unit tests
        run: |
          docker exec backend-container python /app/prediction/test.py

      - name: Stop and remove services
        if: always()
        run: |
          docker-compose -f docker-compose.yml down --remove-orphans
          docker image prune -f

      - name: Comment PR - CI/CD Result
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const body = ${{ job.status }} === 'success'
              ? 'CI/CD terminado con éxito.'
              : 'CI/CD falló. Revisa los logs para más detalles.';
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body
            })