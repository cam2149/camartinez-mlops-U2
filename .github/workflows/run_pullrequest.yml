
name: Pull Request CI/CD

on:
  pull_request:
    branches:
      - main

permissions:
  contents: read
  pull-requests: write

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install coverage pytest
          
      - name: Comment PR - CI/CD Starting
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'CI/CD en acción. Ejecutando tareas …'
            })

      - name: Build Docker image
        run: |
          docker build -f Dockerfile.backend -t backend-image .

      - name: Run Docker container
        run: |
          docker network create backend-network || true
          docker run -d --net backend-network -p 5000:5000 --name backend-container backend-image

      - name: Extract container IP address
        run: |
          CONTAINER_IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' backend-container)
          if [ -z "$CONTAINER_IP" ]; then
              echo "Failed to extract container IP address"
              docker logs backend-container
              exit 1
          fi
          echo "Container IP: $CONTAINER_IP"
          echo "container_ip=$CONTAINER_IP" >> $GITHUB_OUTPUT

        continue-on-error: true
      - name: Run unit tests
        run: |
           coverage run -m pytest tests/ -v -s
           
      - name: Generate Coverage Report
        run: |  
          coverage report -m

      - name: Stop and remove container
        if: always()
        run: |
          docker stop backend-container || true
          docker rm backend-container || true
          docker image prune -f

      - name: Comment PR - CI/CD Result
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const body = ${{ job.status }} === 'success'
              ? 'CI/CD terminado con éxito.'
              : 'CI/CD falló. Revisa los logs para más detalles.';
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body
            })
